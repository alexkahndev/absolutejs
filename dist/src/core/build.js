// @bun
import{e as C,f as T,g as F}from"../../build-s7a2qjm1.js";import{i as M}from"../utils/updateScriptTags.js";import"../../build-sewy0hdv.js";import{rm as _,mkdir as v,writeFile as g}from"node:fs/promises";import{join as z,basename as f}from"node:path";import{exit as E}from"node:process";var{$:L,build:b,Glob:$}=globalThis.Bun;var J=z(import.meta.dir,"..",".."),H=z(J,"example/build"),N=z(J,"example/assets"),k=z(J,"example/react/indexes"),h=z(J,"example/javascript"),j=z(J,"example/typescript"),I=z(J,"example/react/pages"),D=z(J,"example/html"),o=async()=>{let A=performance.now();await _(H,{force:!0,recursive:!0}),await m();let X=new $("*.{tsx,jsx}"),Y=[];for await(let q of X.scan({absolute:!0,cwd:k}))Y.push(q);let V=new $("*.js"),Z=[];for await(let q of V.scan({absolute:!0,cwd:h}))Z.push(q);let Q=new $("*.ts"),B=[];for await(let q of Q.scan({absolute:!0,cwd:j}))B.push(q);let y=Y.concat(Z).concat(B),{logs:P,outputs:O}=await b({entrypoints:y,format:"esm",naming:"[dir]/[name].[hash].[ext]",outdir:H}).catch((q)=>{console.error("Build failed:",q),E(1)});P.forEach((q)=>{if(q.level==="error")console.error(q);else if(q.level==="warning")console.warn(q);else if(q.level==="info"||q.level==="debug")console.info(q)}),await u();let x=O.reduce((q,R)=>{let K=R.path;if(K.startsWith(H))K=K.slice(H.length);K=K.replace(/^\/+/,"");let w=K.split("/").pop();if(!w)return q;let G=`.${R.hash}.`;if(!w.includes(G))throw new Error(`Expected hash delimiter ${G} in ${w}`);let[S]=w.split(G);return q[S]="/"+K,q},{});await M(x,D);let W=performance.now()-A,U;if(W<C)U=`${W.toFixed(F)}ms`;else if(W<T)U=`${(W/C).toFixed(F)}s`;else U=`${(W/T).toFixed(F)}m`;return console.log(`Build completed in ${U}`),console.log("Outputs:",O),console.log("Manifest:",x),x},u=async()=>{await L`cp -R ${N} ${H}`,await v(z(H,"html")),await v(z(H,"htmx")),await L`cp -R ${z(J,"example/html")} ${z(H)}`,await L`cp -R ${z(J,"example/htmx")} ${z(H)}`},m=async()=>{await _(k,{force:!0,recursive:!0}),await v(k);let A=new $("*.*"),X=[];for await(let V of A.scan({cwd:I}))X.push(V);let Y=X.map(async(V)=>{let Z=f(V),[Q]=Z.split("."),B=["import { hydrateRoot } from 'react-dom/client';",`import { ${Q} } from '../pages/${Q}';
`,`hydrateRoot(document, <${Q} />);`].join(`
`);return g(z(k,`${Q}Index.tsx`),B)});await Promise.all(Y)};export{o as build};
export{o as d};
